worker_processes auto;
events {
    worker_connections 1024;
}

http {

    client_max_body_size 500M;

    # 로그 형식 설정 (디버깅 시 유용)
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # 기본 설정
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    # 레이트 리밋 설정 10분에 5회이상 요청시
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_vary on;

    # 카프카 로드밸런싱
    upstream kafka_load_balancing {
            server pbl2-kafka1:29092;
            server pbl2-kafka2:29093;
            server pbl2-kafka3:29094;
    }

    # CORS 주소 동적 반응
    map $http_origin $cors_origin {
            default "";
            "http://localhost:4000" $http_origin;
            "https://myeonjub.store" $http_origin;
    }


    # HTTP 요청을 HTTPS로 리디렉션
    server {
        listen 80; # HTTP 요청받은거
        server_name www.myeonjub.store myeonjub.store; #사이트 도메인 추가
        return 301 https://$host$request_uri;  # 모든 HTTP 요청을 HTTPS로 리디렉션
    }


    # HTTPS 설정 추가
    server {
        listen 443 ssl;  # 443 포트에서 SSL 사용
        server_name www.myeonjub.store myeonjub.store; #HTTPS 도메인

        if ($http_user_agent ~* "(nvdorz|curl|wget|python-requests|bot|crawler|spider|crawlerbot|slurp|ahrefsbot|semrushbot|mj12bot|seznam|duckduckbot)") { 
            return 403;
        }

        # SSL 인증서 경로 설정
        ssl_certificate ${SSL_CERTIFICATE_PATH}fullchain.pem;  # 인증서 경로
        ssl_certificate_key ${SSL_CERTIFICATE_PATH}privkey.pem;  # 개인키 경로

        # SSL 보안 설정 추가 (강화된 보안)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # 보안 헤더 추가
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 레이트 리밋 적용
        location / {
            limit_req zone=req_limit_per_ip burst=10 nodelay;

            root /usr/share/nginx/html;
            index index.html;
            try_files $uri /index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location /static/ {
            root /usr/share/nginx/html;
            expires 1y;
            access_log off;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # 백엔드 요청 프록시 (http://pbl2-be:4400 로 전달)
        location /api/ {
            add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            #프록시 설정
            proxy_pass http://pbl2-be:4400/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 1200s;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Length' 0 always;
                add_header 'Content-Type' 'text/plain; charset=UTF-8' always;
                return 204;
            }
        }

        # 그라파나 요청 프록시
        location /grafana/ {
                proxy_pass http://pbl2-grafana:3000/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
        }

        #프로메테우스 요청 프록시
        location /prometheus/ {
            proxy_pass http://pbl2-prometheus:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 프로메테우스 actuator 메트릭스 프록시
        location /actuator/prometheus {
            proxy_pass http://pbl2-be:4400/actuator/prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 카프카 요청 프록시
        location /kafka {
            proxy_pass http://kafka_load_balancing;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            auth_basic "Kafka Protected";
            auth_basic_user_file /etc/nginx/.htpasswd;
        }

        location = /favicon.ico {
            access_log off;
            log_not_found off;
        }

        location = /robots.txt {
            access_log off;
            log_not_found off;
        }
    }
}
